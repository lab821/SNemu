from mininet.topo import Topo
from mininet.node import (Controller, RemoteController, OVSKernelSwitch,
                          CPULimitedHost, OVSController)
from mininet.net import Mininet
from mininet.link import TCLink
from mininet.cli import CLI
from mininet.util import custom, irange
from mininet.log import setLogLevel, info, warn, error, debug

#from subprocess import Popen, PIPE, call
import subprocess
from argparse import ArgumentParser
import multiprocessing
from time import sleep
import os
import sys
import json

from network import (DumbbellNet, SingleSwitchNet, SinglepathTreeNet,
                     MultipathTreeNet, FatTreeNet, ShamrockNet,
                     RegularTreeNet, ManagementNet, CoflowEmuNet)
from trace import Trace

#from nat import connectToGateway, establishRoutes, startNAT, stopNAT
#from sshd import startSSH, stopSSH

def RunTest(net=None, remoteController=False, enableNAT=False, trace="/home/pc/mremu/Trace.txt"):

	net.start()
#	info( '*** Starting controller\n' )
#	for controller in net.controllers:
#		controller.start()
#	info( '*** Starting %s switches\n' % len( net.switches ) )
#	for switch in net.switches:
#		info( switch.name + ' ')
#		if switch.name != "mgnt0":
#			switch.start( [net.controllers[0]])

	# wait for the switches to connect to the controller
	info('** Waiting for switches to connect to the controller\n')
	sleep(1)

	hosts = net.hosts
	# start communication between master and slaves
	for n in irange(0, len(hosts)-1):
		host = hosts[n]
		if(n==0):
			# copy the Trace.txt to the master 
			cmd = "docker cp " + trace + " mn.master:/varys/trace.txt"
			#info(cmd)
			returnCode = os.system(cmd)
			info('** Trace file copied to master\n')
			host.popen("nohup ./run coflowemu.framework.master.EmulationMaster --ip 10.0.0.254 --port 1606 --trace /varys/trace.txt")
			sleep(1)
		else:
			slavecmd1 = "nohup ./run coflowemu.framework.slave.Slave coflowemu://10.0.0.254:1606"
			host.popen(slavecmd1)

	sleep(1)
	# start transmission 
	for n in irange(1,len(hosts)-1):
		host = hosts[n]
		# copy Trace.txt to the slaves
		cmd = "docker cp " + trace + " mn.m"+str(n)+":/varys/trace.txt"
		#info(cmd)
		returnCode = os.system(cmd)
		infostr = "** Trace file copied to mn.m"+str(n)+"\n"
		info(infostr)	
		# transmission
		slavecmd2 = "nohup ./run coflowemu.services.EmulationSlave coflowemu://10.0.0.254:1606 /varys/trace.txt "+ str(n)    		
		host.popen(slavecmd2)

	CLI(net)

	net.stop()

if __name__ == '__main__':
	setLogLevel( 'info' )

	json_file = open("config.json")
	config = json.load(json_file)
	json_file.close()
	print config
	#sys.exit()

	topology = config["networkTopology"]
	if topology == "singleswitch":
		net = SingleSwitchNet(numHosts=config["numHostsPerSwitch"],
			bw=config["bandwidthMininet"],
			cpu=config["cpuLimit"],
                        #cpu=0.05,
			queue=config["queue"],
			remoteController=config["remoteController"])
	elif topology == "dumbbell":
		net = DumbbellNet(numSwitches=config["numSwitches"],
			numHostsPerSwitch=config["numHostsPerSwitch"],
			L=config["numberTrunkLinks"],
			bw=config["bandwidthMininet"],
			cpu=config["cpuLimit"],
			queue=config["queue"],
			remoteController=config["remoteController"])
	elif topology == "singlepathtree":
		net = SinglepathTreeNet(depth=2, fanout=4,
			bw=config["bandwidthMininet"],


                        cpu=config["cpuLimit"],
                        queue=config["queue"],
			remoteController=config["remoteController"])
	elif topology == "multipathtree":
		net = MultipathTreeNet(depth=2, fanout=4,
			bw=config["bandwidthMininet"],
			cpu=config["cpuLimit"],
			queue=config["queue"])
	elif topology == "fattree":
		net = FatTreeNet(k=4,
			bw=config["bandwidthMininet"],
                        cpu=config["cpuLimit"],
                        queue=config["queue"])
	elif topology == "shamrock":
		net = ShamrockNet(bw=config["bandwidthMininet"],
                        cpu=config["cpuLimit"],
                        queue=config["queue"],
                        remoteController=config["remoteController"])
	# elif topology == "varystest":
	# 	net = VarysNet(numMapers=config["numMapers"],
	# 		numReducers=config["numReducers"],
	# 		bw=config["bandwidthMininet"],
	# 		cpu=config["cpuLimit"],
    #                     #cpu=0.05,
	# 		queue=config["queue"],
	# 		remoteController=config["remoteController"])
	elif topology == "CoflowEmuNet":
		net = CoflowEmuNet(node_count=config["numNodes"],
			bw=config["bandwidthMininet"],
#			cpu=config["cpuLimit"],
                        #cpu=0.05,
	#		queue=config["queue"],
			remoteController=config["remoteController"])
		# generate Trace.txt
	#	Trace(config['numNodes'],config['numCoflows'])
	else:
		print "Error: Unknown topology type."
		sys.exit(1)

	RunTest(net=net, remoteController=config["remoteController"], trace=config["trace"])

	os.system('sudo mn -c')

